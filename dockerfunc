#!/bin/bash
# bash wrappers for docker run commands
# refs:
# https://github.com/jfrazelle/dotfiles
# https://blog.jessfraz.com/post/docker-containers-on-the-desktop/



#
# container aliases
#

# aircraft communication addressing/reporting system
acarsdec(){
	del_stopped acarsdec

	docker run -d \
		--device=/dev/bus/usb \
		--name acarsdec \
		mitchtech/rpi-acarsdec -v -g 450 -r 0 130.025 131.550
}
# amazon alexa client
alexapi(){
	del_stopped alexapi

	docker run -d \
		--net host \
		-p 5000:5000 \
		--device /dev/snd \
		--device=/dev/bus/usb \
		--name alexapi \
		mitchtech/rpi-alexapi
}
# adb, fastboot
android-tools(){
	docker run --rm -it \
		--device=/dev/bus/usb \
		--name android-tools \
		mitchtech/rpi-android-tools
}
# beacon bluetooth low energy
# beacon(){}
# video and photo webcam capture
# cheese(){}
# web-based gui for docker
# movies via nzbs & torrents
couchpotato(){
	del_stopped couchpotato

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.sonarr:/config \
		-v $HOME/Downloads:/downloads \
		-v $HOME/movies:/movies \
		-p 5050:5050 \
		--restart=always \
		--name couchpotato \
		mitchtech/rpi-couchpotato
}
# web interface for docker
dockerui(){
	del_stopped dockerui

	docker run -d \
		-p 9000:9000 \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--name dockerui \
		hypriot/rpi-dockerui
}
# adsb decoder for rtl-sdr
dump1090(){
	del_stopped dump1090

	docker run -d \
		--net host \
		-p 8080:8080 \
		--device=/dev/bus/usb \
		--name dump1090 \
		mitchtech/rpi-dump1090 --interactive --net
}
# dns, dhcp, network infrastructure
dnsmasq(){
	del_stopped dnsmasq

	docker run -d \
		-p=53:53/udp
		-v .dnsmasq:/dnsmasq \
		--name dnsmasq \
		mitchtech/rpi-dnsmasq
}
# real-time adsb aircraft tracking
# flightaware(){}
# frequency show visual spectrum analyzer
freqshow(){
	docker run --rm -it \
		--privileged \
		--device=/dev/bus/usb \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-e DISPLAY=172.17.42.1:0.0 \
		--name freqshow \
		mitchtech/rpi-freqshow
}
# google talk (xmpp) bot
# gtalkbot(){}
# node.js-based development environment
google-coder(){
	del_stopped google-coder

	docker run -d \
		-p 8080:8080 \
		--name google-coder \
		hypriot/rpi-google-coder
}
# gnuradio suite (osmocom, gqrx)
# gnuradio(){}
# gpio pin mode/state acess
# gpio(){
# 	docker run --rm -it \
# 		--cap-add SYS_RAWIO \
# 		--device /dev/mem \
# 		--name gpio \
# 		mitchtech/rpi-wiringpi "$@"
# }
# physical gmail notification daemon
# gpio-gmail(){}
# minimal busybox http server
httpd(){
	del_stopped httpd

	docker run -d \
		-p 80:80 \
		--name httpd \
		mitchtech/rpi-busybox-httpd
}
# debian firefox web brower
iceweasel(){
	del_stopped iceweasel
	xhost +  

	docker run -d \
		--net host \
		-e DISPLAY=unix:0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		--name iceweasel \
		mitchtech/rpi-iceweasel "$@"
		# --privileged \
		# --restart=on-failure:5 \
}
# voice control platform
# jasper(){}
# gsm base station scanner
# kalibrate(){}
# kitematic docker gui
kitematic(){
	del_stopped kitematic

	docker run -d \
		--privileged \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-e DISPLAY=172.17.42.1:0.0 \
		--name kitematic \
		mitchtech/rpi-kitematic
}
# kivy graphic info screen
kivy-infoscreen(){
	del_stopped kivy-infoscreen

	docker run -d \
		--privileged \
		-e DISPLAY=172.17.42.1:0.0 \
		--name kivy-infoscreen \
		mitchtech/rpi-kivy-infoscreen
}
# modulation/demodulation over rf
# minimodem(){}
# webcam and motion detection server
motion(){
	del_stopped motion

	docker run -d \
		--device=/dev/video0 \
	    -v $PWD/motion.conf:/etc/motion/motion.conf \
		-p 8080:8080 \
	    -p 8081:8081 \
		--name motion \
		mitchtech/rpi-motion
		# --privileged \
	    # -v ./motion:/var/lib/motion \
}
# digital transmission decoder/demodulator
# multimon-ng(){}
# text-based audio player
mpg123(){
	docker run --rm -it \
		--privileged \
		--device /dev/snd \
		-v $PWD/audio.mp3:/audio.mp3 \
		-v $PWD:/audio \
		--name mpg123 \
		mitchtech/rpi-mpg123	
}
# adafruit neopixel leds
neopixel(){
	del_stopped neopixel

	docker run -d \
		--cap-add SYS_RAWIO \
		--device /dev/mem \
		--name neopixel \
		mitchtech/rpi-neopixel
}
# nintendo emulator
# nes(){}
# web and reverse proxy server
nginx(){
	del_stopped nginx

	docker run -d \
		--restart always \
		-v $HOME/.nginx:/etc/nginx \
		--net host \
		--name nginx \
		nginx
}
# pdf viewer and presentation tool
okular(){
	del_stopped okular
	xhost +  

	docker run -d \
		-e DISPLAY=unix:0 \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		--name okular \
		mitchtech/rpi-okular "$@"
		# --privileged \
}
# smartphone test farm
# openstf(){}
# computer vision
# opencv(){}
# text-based pandora music
pianobar(){
	docker run --rm -it \
		--privileged \
		--net host \
		--device /dev/snd \
		--name pianobar \
		mitchtech/rpi-pianobar	
}
# fm radio transmit pifm(sound_file, frequency)
pifm(){
	del_stopped pifm
	local sound_file=$1
	local frequency=$2

	docker run -d \
		--cap-add SYS_RAWIO \
		--device /dev/mem \
		--name pifm \
		mitchtech/rpi-pifm ${sound_file} ${frequency}
}
# fm radio playlist broadcast
pirate-radio(){
	del_stopped pirate-radio

	docker run -d \
		--cap-add SYS_RAWIO \
		--device /dev/mem \
		-v $PWD/pirateradio.conf:/pirateradio/pirateradio.conf \
		-v $PWD:/pirateradio \
		--name pirate-radio \
		mitchtech/rpi-pirate-radio
}
# private web proxy
# privoxy(){}
# audio server and proxy
# pulseaudio(){}
# real-time database engine
# rethinkdb(){}
# radio transmitter for am, fm, ssb, sstv, fsq, vfo
rpitx(){
	del_stopped rpitx
	local sound_file=$1
	local frequency=$2

	docker run -d \
		--cap-add SYS_RAWIO \
		--device /dev/mem \
		--name rpitx \
		mitchtech/rpi-rpitx ${sound_file} ${frequency}
}
# rtl-sdr ais boat/ship tracking
rtl-ais(){
	del_stopped rtl-ais

	docker run -d \
		--device=/dev/bus/usb \
		--name rtl-ais \
		mitchtech/rpi-rtl-ais
}
# usenet binary downloader
sabnzbd(){
	del_stopped sabnzbd

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.sabnzbd:/config \
		-v $HOME/Downloads:/data \
		-p 8080:8080 \
		--restart=always \
		--name sabnzbd \
		mitchtech/rpi-sabnzbd
}
# pvr for usenet and bittorrent
sickbeard(){
	del_stopped sickbeard

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.sickbeard:/config \
		-v $HOME/Downloads:/data/downloads \
		-v $HOME/.nzb:/data/nzb \
		-v $HOME/.torrents:/data/torrents \
		-p 8081:8081 \
		--restart=always \
		--name sickbeard \
		mitchtech/rpi-sickbeard
}
# pvr for usenet and bittorrent
sonarr(){
	del_stopped sonarr

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.sonarr:/config \
		-v $HOME/Downloads:/downloads \
		-v $HOME/TV:/tv \
		-p 8080:8080 \
		--name sonarr \
		mitchtech/rpi-sonarr
}
# the onion router
# tor(){}
# web browser for tor
# torbrowser(){}
# instant messenger client for tor
# tormessenger(){}
# proxy on top of tor
# torproxy(){}
# bittorrent client
transmission(){
	del_stopped transmission

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v $HOME/.transmission:/config \
		-v $HOME/Downloads:/downloads \
		-p 9091:9091 \
		-p 51413:51413 \
		-p 51413:51413/udp \
		--name transmission \
		mitchtech/rpi-transmission
		# -v $HOME/Torrents:/transmission/download \
		# -v $HOME/.transmission:/transmission/config \
		# transmission -v pass -u user
}
# gpio, wiringpi, pyserial
wiringpi(){
	docker run --rm -it \
		--cap-add SYS_RAWIO \
		--device /dev/mem \
		--name wiringpi \
		mitchtech/rpi-wiringpi
}

#
# support aliases
#
# kill all running containers
alias docker-killall='docker kill $(docker ps -q)'

# delete all stopped containers
alias docker-cleanc='printf "\n>>> Deleting stopped containers\n\n" && docker rm $(docker ps -a -q)'

# delete all untagged images
alias docker-cleani='printf "\n>>> Deleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'

# delete dangling volumes
alias docker-cleanv='printf "\n>>> Deleting dangling volumes\n\n" && docker volume rm $(docker volume ls -qf dangling=true)'

# delete stopped containers, untagged images
alias docker-cleanall='dockercleanc || true && dockercleani || true && dockercleanv'

# removes dangling and exited docker containers
dcleanup(){
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# delete stopped container
del_stopped(){
	local name=$1
	local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm $name
	fi
}
# dependency on another running container
relies_on(){
	local containers=$@

	for container in $containers; do
		local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
# enter a running container
enter() {
  local name=${1:?}
  docker exec -it $name sh -c 'exec $(command -v bash || command -v sh)'
}
# helper to identify running containers
__enter() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  for cid in $(docker ps -q)
  do
    local name=$(docker inspect -f '{{.Name}}' $cid)
    name=${name#/}
    if [[ $name = $cur* ]]
    then
      COMPREPLY+=("$name")
    fi
  done
}
# tab completion for entering running containers
complete -F __enter enter