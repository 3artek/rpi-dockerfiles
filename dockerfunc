#!/bin/bash
# bash wrappers for docker run commands
# refs: 
# https://github.com/jfrazelle/dotfiles
# https://blog.jessfraz.com/post/docker-containers-on-the-desktop/



#
# container aliases
#

# aircraft communication addressing/reporting system
acarsdec(){
	docker run --rm -it \
	--device=/dev/bus/usb \
	--name acarsdec \
	mitchtech/acarsdec -v -g 450 -r 0 130.025 131.550
}
# web-based gui for docker
dockerui(){
	del_stopped dockerui

	docker run -d \
	-p 9000:9000 \
	-v /var/run/docker.sock:/var/run/docker.sock \
	--name dockerui \
	hypriot/rpi-dockerui
}
# adsb decoder for rtl-sdr
dump1090(){
	docker run --rm -it \
	--net host \
	-p 8080:8080 \
	--device=/dev/bus/usb \
	--name dump1090 \
	mitchtech/dump1090 
}
# frequency show visual spectrum analyzer
freqshow(){
	docker run --rm -it \
	--device=/dev/bus/usb \
	--name freqshow \
	mitchtech/freqshow 
}
# node.js-based development environment
google-coder(){
	del_stopped google-coder

	docker run -d \
	-p 8080:8080 \
	--name google-coder \
	hypriot/rpi-google-coder
}
# gpio pin mode/state acess
gpio(){
	docker run --rm \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name gpio \
	mitchtech/rpi-gpio "$@"
}
# minimal busybox http server
httpd(){
	del_stopped httpd

	docker run -d \
	-p 80:80 \
	--name httpd \
	mitchtech/rpi-busybox-httpd
}
# kitematic docker gui
kitematic(){
	del_stopped kitematic

	docker run -d \
	--privileged \
	-v /var/run/docker.sock:/var/run/docker.sock \
	-e DISPLAY=172.17.42.1:0.0 \
	--name kitematic \
	mitchtech/rpi-kitematic
}
# adafruit neopixel leds
neopixel(){
	del_stopped neopixel

	docker run -d \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name neopixel \
	mitchtech/rpi-neopixel
}
# fm radio transmit pifm(sound_file, frequency)
pifm(){
	del_stopped pifm
	local sound_file=$1
	local frequency=$2

	docker run -d \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name pifm \
	mitchtech/rpi-pifm ${sound_file} ${frequency}
}
# fm radio playlist broadcast
pirate-radio(){
	del_stopped pirate-radio

	docker run -d \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name pirate-radio \
	mitchtech/rpi-pirate-radio
}
# radio transmitter for am, fm, ssb, sstv, fsq, vfo
rpitx(){
	del_stopped rpitx
	local sound_file=$1
	local frequency=$2

	docker run -d \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name rpitx \
	mitchtech/rpi-rpitx ${sound_file} ${frequency}
}
# rtl-sdr ais boat/ship tracking
rtl-ais(){
	docker run --rm -it \
	--device=/dev/bus/usb \
	--name rtl-ais \
	mitchtech/rtl-ais
}
# gpio, wiringpi, pyserial
wiringpi(){
	docker run --rm -it \
	--cap-add SYS_RAWIO \
	--device /dev/mem \
	--name wiringpi \
	mitchtech/rpi-wiringpi
}

#
# support aliases
#
# kill all running containers
alias docker-killall='docker kill $(docker ps -q)'

# delete all stopped containers
alias docker-cleanc='printf "\n>>> Deleting stopped containers\n\n" && docker rm $(docker ps -a -q)'

# delete all untagged images
alias docker-cleani='printf "\n>>> Deleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'

# delete dangling volumes
alias docker-cleanv='printf "\n>>> Deleting dangling volumes\n\n" && docker volume rm $(docker volume ls -qf dangling=true)'

# delete stopped containers, untagged images
alias docker-cleanall='dockercleanc || true && dockercleani || true && dockercleanv'

# removes dangling and exited docker containers
dcleanup(){
	docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
	docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# delete stopped container
del_stopped(){
	local name=$1
	local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm $name
	fi
}
# dependency on another running container
relies_on(){
	local containers=$@

	for container in $containers; do
		local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}